import rmgpy.rmg.main as mn
from rmgpy.rmg.main import RMG
from rdkit import Chem
from rmgpy.species import Species
from rmgpy.solver.simple import SimpleReactor
import networkx as nx
import matplotlib
# This line below is needed when trying to print matplotlib's figures in PyCharm
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt

"""
Testing RMG features basically
"""
print('Hello! This is a test.')
# The input has to be in the form of an RMG "job" file
# Refer to the doc for details
file_path = 'input.py'

# an instance of the RMG API
my_rmg = RMG(input_file=file_path)
my_rmg.execute()

# note that the above process will take long (several minutes)

network_graph = nx.DiGraph()


def generate_network(species, reactions):
    for sp in species:
        # You can pass the entire Species object too (which has a lot of info)
        # Each species has a unique index integer id during an individual run
        # I passed sp.index for the sake of labels in the graph
        network_graph.add_node(sp.index)
    for reaction in reactions:
        try:
            for reactant, product in reaction.pairs:
                if reaction.is_forward:
                    network_graph.add_edge(reactant.index, product.index)
                else:
                    network_graph.add_edge(product.index, reactant.index)
        except(ValueError):
            # Sometimes it can't find reactant-product pairs, so just let those cases slide
            pass
    # once we're done adding nodes and edges to the graph
    # disable with_labels when passing the entire Species object (which turns into a huge string)
    nx.draw(network_graph, with_labels=True, arrows=True)
    plt.savefig('glycine-hcn.png')
    plt.show()


# Don't forget to unpack the species and reactions lists before adding them into a single list
species_list = [*my_rmg.reaction_model.core.species, *my_rmg.reaction_model.edge.species]
reactions_list = [*my_rmg.reaction_model.core.reactions, *my_rmg.reaction_model.edge.reactions]

generate_network(species_list, reactions_list)

# TODO: find a way to access networks generated by RMG
# as of now it prints an empty list.
print('Printing list of networks')
print(my_rmg.reaction_model.network_list)

## I was trying something here
## The code throws an exception no matter how hard you try
## The methods require RMG#execute() in one way or the other

# read the SDF containing glucose and glycine
# sd_supp = Chem.SDMolSupplier('data/test_1.sdf')
# reactant_1 = sd_supp[0] # Work with only one reactant from the list for now
# print(Chem.MolToSmiles(reactant_1))
# reactant_2 = Chem.SDMolSupplier('HCN.sdf')[0] # HCN is the second reactant

# Create an RMG Species object from a smiles string corresponding to
# the reactant
# sp1 = Species(smiles=Chem.MolToSmiles(reactant_1))
# sp2 = Species(smiles=Chem.MolToSmiles(reactant_2))

# my_rmg.load_database()
# performs the reaction
# rxns = reac.react_species((reactant_1, reactant_2))
# print(rxns)
# reactor = SimpleReactor(T=(800,'K'), P = (1e0,'bar'), initial_mole_fractions={'glucose':0.5, 'HCN':0.5})
